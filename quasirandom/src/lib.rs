#[cfg(test)]
extern crate rand;

/// A type that implements `FromUniform` is able to instantiate itself
/// from an `f64` uniformly distributed in the range [0, 1). Implementations
/// should generate a value that is 'proportional' to the given `f64` in
/// some way.
///
/// For example, a `bool` may map values < 0.5 to `false` and >= 0.5 to
/// `true`, or a `u32` might map values evenly in [0, u32::MAX].
///
/// The mapping is less clear when it comes to more complicated enums, 
/// such as `Option` -- how does one uniformly choose `None` vs. `Some`?
/// This is a judgment call of the implementer.

pub trait FromUniform {
    fn from_uniform(uniform_value: f64) -> Self;
}

impl FromUniform for f64 {
    fn from_uniform(uniform_value: f64) -> Self {
        uniform_value
    }
}

impl FromUniform for f32 {
    fn from_uniform(uniform_value: f64) -> Self {
        uniform_value as f32
    }
}

macro_rules! unsigned {
    ($($ut:tt)*) => {
        $(
        impl FromUniform for $ut {
            fn from_uniform(uniform_value: f64) -> Self {
                (::std::$ut::MAX as f64 * uniform_value) as $ut
            }
        }
        )*
    }
}
unsigned!(u8 u16 u32 u64 u128 usize);

macro_rules! signed {
    ($($st:tt)*) => {
        $(
        impl FromUniform for $st {
            fn from_uniform(uniform_value: f64) -> Self {
                let min = ::std::$st::MIN as f64;
                let result = (::std::$st::MAX as f64 - min + 1.0) * uniform_value + min;
                result as $st
            }
        }
        )*
    }
}
signed!(i8 i16 i32 i64 i128 isize);

impl <T: FromUniform, E: FromUniform> FromUniform for Result<T, E> {
    fn from_uniform(uniform_value: f64) -> Self {
        if uniform_value < 0.5 {
            Ok(T::from_uniform(uniform_value*2.0))
        } else {
            Err(E::from_uniform(uniform_value*2.0 - 1.0))
        }
    }
}

impl <T: FromUniform> FromUniform for Option<T> {
    fn from_uniform(uniform_value: f64) -> Self {
        if uniform_value < 0.5 {
            Some(T::from_uniform(uniform_value*2.0))
        } else {
            None
        }
    }
}

impl FromUniform for () {
    fn from_uniform(_: f64) -> Self {
        ()
    }
}

impl FromUniform for bool {
    fn from_uniform(uniform_value: f64) -> Self {
        uniform_value < 0.5
    }
}

pub trait Quasirandom: private::Sealed {
    #[doc(hidden)]
    fn from_f64(i: f64) -> Self;
}

// Generated by the python:
//
// for d in xrange(1, 33):
// 
//     lower = 1.0
//     upper = 2.0
// 
//     while upper - lower > 1e-14:
//         mid = (lower+upper)/2.0
//         y = mid**(d+1)
//         if y < mid+1:
//             lower = mid
//         elif y > mid+1:
//             upper = mid
// 
//     parameters = ["T"+str(n) for n in xrange(d)]
//     joined = ','.join(parameters)
// 
//     print "impl <%s> Quasirandom for (%s) where" % (joined, joined)
//     for parameter in parameters:
//         print "    %s: FromUniform," % parameter
//     print "{"
//     print "    fn from_f64(i: f64) -> Self {"
//     print "        ("
//     for (parameter, i) in zip(parameters, xrange(1, d+1)):
//         print "            %s::from_uniform((i * %.55f).fract())," % (parameter, 1.0/(lower**i))
//     print "        )"
//     print "    }"
//     print "}"
//
// The binary search finds the unique positive root of x^(d+1) = x + 1, and
// the magic numbers emitted in the loop are that the inverse of that root 
// exponentiated by increasing integers. See the following blog post by
// Martin Roberts for a full explanation:
// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/

impl <T0> Quasirandom for T0 where
    T0: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        T0::from_uniform((i * 0.6180339887498954576372511837689671665430068969726562500).fract())
    }
}

impl <T0,T1> Quasirandom for (T0,T1) where
    T0: FromUniform,
    T1: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.7548776662466941678175658125837799161672592163085937500).fract()),
            T1::from_uniform((i * 0.5698402909980553321389606935554184019565582275390625000).fract()),
        )
    }
}
impl <T0,T1,T2> Quasirandom for (T0,T1,T2) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.8191725133961673677163162210490554571151733398437500000).fract()),
            T1::from_uniform((i * 0.6710436067037939267265755916014313697814941406250000000).fract()),
            T2::from_uniform((i * 0.5497004779019761810943123236938845366239547729492187500).fract()),
        )
    }
}
impl <T0,T1,T2,T3> Quasirandom for (T0,T1,T2,T3) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.8566748838545052979753791078110225498676300048828125000).fract()),
            T1::from_uniform((i * 0.7338918566271300791825638043519575148820877075195312500).fract()),
            T2::from_uniform((i * 0.6287067210378138870652264813543297350406646728515625000).fract()),
            T3::from_uniform((i * 0.5385972572236160660352766171854455024003982543945312500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4> Quasirandom for (T0,T1,T2,T3,T4) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.8812714616335720618778282187122385948896408081054687500).fract()),
            T1::from_uniform((i * 0.7766393890897724805455482055549509823322296142578125000).fract()),
            T2::from_uniform((i * 0.6844301295853482125508548961079213768243789672851562500).fract()),
            T3::from_uniform((i * 0.6031687406857350053357436081569176167249679565429687500).fract()),
            T4::from_uniform((i * 0.5315553977157986276225187793897930532693862915039062500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5> Quasirandom for (T0,T1,T2,T3,T4,T5) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.8986537126287019727755023268400691449642181396484375000).fract()),
            T1::from_uniform((i * 0.8075784952213495015982402946974616497755050659179687500).fract()),
            T2::from_uniform((i * 0.7257334129697662339353314564505126327276229858398437500).fract()),
            T3::from_uniform((i * 0.6521830259439793664455464750062674283981323242187500000).fract()),
            T4::from_uniform((i * 0.5860866975779780441158095527498517185449600219726562500).fract()),
            T5::from_uniform((i * 0.5266889867007452652458709962957073003053665161132812500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6> Quasirandom for (T0,T1,T2,T3,T4,T5,T6) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9115923534820571383363585482584312558174133300781250000).fract()),
            T1::from_uniform((i * 0.8310006189269558696253170637646690011024475097656250000).fract()),
            T2::from_uniform((i * 0.7575338099526698343311181815806776285171508789062500000).fract()),
            T3::from_uniform((i * 0.6905620286569837951162753597600385546684265136718750000).fract()),
            T4::from_uniform((i * 0.6295110649287636306326021440327167510986328125000000000).fract()),
            T5::from_uniform((i * 0.5738574732214076767888855101773515343666076660156250000).fract()),
            T6::from_uniform((i * 0.5231240845771696346133694532909430563449859619140625000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9215993196339887782997379872540477663278579711914062500).fract()),
            T1::from_uniform((i * 0.8493453059498310420138977860915474593639373779296875000).fract()),
            T2::from_uniform((i * 0.7827560560976862813475918301264755427837371826171875000).fract()),
            T3::from_uniform((i * 0.7213874487390119494278906131512485444545745849609375000).fract()),
            T4::from_uniform((i * 0.6648301819503724674476075051643420010805130004882812500).fract()),
            T5::from_uniform((i * 0.6127070433576041752488094971340615302324295043945312500).fract()),
            T6::from_uniform((i * 0.5646703942933208875132322646095417439937591552734375000).fract()),
            T7::from_uniform((i * 0.5203998511981807739701366699591744691133499145507812500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9295701282320244507317852367123123258352279663085937500).fract()),
            T1::from_uniform((i * 0.8641006233013023285494114134053234010934829711914062500).fract()),
            T2::from_uniform((i * 0.8032421272075638274401399030466563999652862548828125000).fract()),
            T3::from_uniform((i * 0.7466698871896992883989696565549820661544799804687500000).fract()),
            T4::from_uniform((i * 0.6940820227819199939034433555207215249538421630859375000).fract()),
            T5::from_uniform((i * 0.6451979149209322583757852953567635267972946166992187500).fract()),
            T6::from_uniform((i * 0.5997567085080858229062528153008315712213516235351562500).fract()),
            T7::from_uniform((i * 0.5575159204358781650512355554383248090744018554687500000).fract()),
            T8::from_uniform((i * 0.5182501456509743809064616471005138009786605834960937500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9360691110777616952276503070606850087642669677734375000).fract()),
            T1::from_uniform((i * 0.8762253807139109840207424895197618752717971801757812500).fract()),
            T2::from_uniform((i * 0.8202075132286440473095012748672161251306533813476562500).fract()),
            T3::from_uniform((i * 0.7677709178072382734114853519713506102561950683593750000).fract()),
            T4::from_uniform((i * 0.7186866405431787674373822483175899833440780639648437500).fract()),
            T5::from_uniform((i * 0.6727403647567161693032744551601354032754898071289062500).fract()),
            T6::from_uniform((i * 0.6297314752239485668994234401907306164503097534179687500).fract()),
            T7::from_uniform((i * 0.5894721822305690750454232329502701759338378906250000000).fract()),
            T8::from_uniform((i * 0.5517867016256371437421535119938198477029800415039062500).fract()),
            T9::from_uniform((i * 0.5165104872952402947916539233119692653417587280273437500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9414696173216354768698010957450605928897857666015625000).fract()),
            T1::from_uniform((i * 0.8863650403397467236743523244513198733329772949218750000).fract()),
            T2::from_uniform((i * 0.8344857553359373847357005615776870399713516235351562500).fract()),
            T3::from_uniform((i * 0.7856429847364808649601286560937296599149703979492187500).fract()),
            T4::from_uniform((i * 0.7396590001912820566687400969385635107755661010742187500).fract()),
            T5::from_uniform((i * 0.6963664758585899061671398158068768680095672607421875000).fract()),
            T6::from_uniform((i * 0.6556078795422024541039718315005302429199218750000000000).fract()),
            T7::from_uniform((i * 0.6172348994656462473074043373344466090202331542968750000).fract()),
            T8::from_uniform((i * 0.5811079045974800738605381411616690456867218017578125000).fract()),
            T9::from_uniform((i * 0.5470954365639670857746068577398546040058135986328125000).fract()),
            T10::from_uniform((i * 0.5150737313002911044179654709296301007270812988281250000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9460285282856161215292445376690011471509933471679687500).fract()),
            T1::from_uniform((i * 0.8949699763302487731664314196677878499031066894531250000).fract()),
            T2::from_uniform((i * 0.8466671295675178843254116145544685423374176025390625000).fract()),
            T3::from_uniform((i * 0.8009712585325660105795009258145000785589218139648437500).fract()),
            T4::from_uniform((i * 0.7577416609086412568885293694620486348867416381835937500).fract()),
            T5::from_uniform((i * 0.7168452282901002226012110440933611243963241577148437500).fract()),
            T6::from_uniform((i * 0.6781560363278500425110451033106073737144470214843750000).fract()),
            T7::from_uniform((i * 0.6415549569952427866326161165488883852958679199218750000).fract()),
            T8::from_uniform((i * 0.6069292917805512166395942585950251668691635131835937500).fract()),
            T9::from_uniform((i * 0.5741724246765862460506468778476119041442871093750000000).fract()),
            T10::from_uniform((i * 0.5431834938989746897064492259232793003320693969726562500).fract()),
            T11::from_uniform((i * 0.5138670813222858679836235751281492412090301513671875000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9499283999636237707520081130496691912412643432617187500).fract()),
            T1::from_uniform((i * 0.9023639650574503123792169390071649104356765747070312500).fract()),
            T2::from_uniform((i * 0.8571811575118549741958418053400237113237380981445312500).fract()),
            T3::from_uniform((i * 0.8142607254342033584748605790082365274429321289062500000).fract()),
            T4::from_uniform((i * 0.7734893880649322817077973013510927557945251464843750000).fract()),
            T5::from_uniform((i * 0.7347595367933635879253984057868365198373794555664062500).fract()),
            T6::from_uniform((i * 0.6979689511441331539742805034620687365531921386718750000).fract()),
            T7::from_uniform((i * 0.6630205289846351490723463939502835273742675781250000000).fract()),
            T8::from_uniform((i * 0.6298220302414098137333553495409432798624038696289062500).fract()),
            T9::from_uniform((i * 0.5982858334490634977242962122545577585697174072265625000).fract()),
            T10::from_uniform((i * 0.5683287044891719430594889672647695988416671752929687500).fract()),
            T11::from_uniform((i * 0.5398715769087982785379153938265517354011535644531250000).fract()),
            T12::from_uniform((i * 0.5128393432388131945032228031777776777744293212890625000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9533025374016682595978977587947156280279159545898437500).fract()),
            T1::from_uniform((i * 0.9087857278164590546509771229466423392295837402343750000).fract()),
            T2::from_uniform((i * 0.8663477402818522410399282307480461895465850830078125000).fract()),
            T3::from_uniform((i * 0.8258914990828910562825626584526617079973220825195312500).fract()),
            T4::from_uniform((i * 0.7873244616941876827809210226405411958694458007812500000).fract()),
            T5::from_uniform((i * 0.7505584070914715910660675035614985972642898559570312500).fract()),
            T6::from_uniform((i * 0.7155092339484541152927477014600299298763275146484375000).fract()),
            T7::from_uniform((i * 0.6820967682573851886829174873128067702054977416992187500).fract()),
            T8::from_uniform((i * 0.6502445799332429166028646250197198241949081420898437500).fract()),
            T9::from_uniform((i * 0.6198798079820423412300556265108752995729446411132812500).fract()),
            T10::from_uniform((i * 0.5909329938333397480576536509033758193254470825195312500).fract()),
            T11::from_uniform((i * 0.5633379224556871456286444299621507525444030761718750000).fract()),
            T12::from_uniform((i * 0.5370314708915908674669026368064805865287780761718750000).fract()),
            T13::from_uniform((i * 0.5119534638655036662413522208225913345813751220703125000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9562505576379921601315459156467113643884658813476562500).fract()),
            T1::from_uniform((i * 0.9144151289829710593792810868762899190187454223632812500).fract()),
            T2::from_uniform((i * 0.8744099770025826057207041230867616832256317138671875000).fract()),
            T3::from_uniform((i * 0.8361550281129435102656088929506950080394744873046875000).fract()),
            T4::from_uniform((i * 0.7995737119048133001442124623281415551900863647460937500).fract()),
            T5::from_uniform((i * 0.7645928078816569550824056022975128144025802612304687500).fract()),
            T6::from_uniform((i * 0.7311422989028327767968562511669006198644638061523437500).fract()),
            T7::from_uniform((i * 0.6991552310385573676398962561506778001785278320312500000).fract()),
            T8::from_uniform((i * 0.6685675795561397682931215058488305658102035522460937500).fract()),
            T9::from_uniform((i * 0.6393181207692413270393672064528800547122955322265625000).fract()),
            T10::from_uniform((i * 0.6113483094936602579849704852676950395107269287109375000).fract()),
            T11::from_uniform((i * 0.5846021618643565398443229241820517927408218383789062500).fract()),
            T12::from_uniform((i * 0.5590261432791666651453965641849208623170852661132812500).fract()),
            T13::from_uniform((i * 0.5345690612449192080646298563806340098381042480468750000).fract()),
            T14::from_uniform((i * 0.5111819629114719987228454556316137313842773437500000000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9588484010075664087935365387238562107086181640625000000).fract()),
            T1::from_uniform((i * 0.9193902561147669905139423462969716638326644897460937500).fract()),
            T2::from_uniform((i * 0.8815558769775811986946223441918846219778060913085937500).fract()),
            T3::from_uniform((i * 0.8452784430387766390069259614392649382352828979492187500).fract()),
            T4::from_uniform((i * 0.8104938835138962849313770675507839769124984741210937500).fract()),
            T5::from_uniform((i * 0.7771407642337122556597250877530314028263092041015625000).fract()),
            T6::from_uniform((i * 0.7451601791432932442305059339560102671384811401367187500).fract()),
            T7::from_uniform((i * 0.7144956462660584373125516322033945471048355102539062500).fract()),
            T8::from_uniform((i * 0.6850930079490779034401271019305568188428878784179687500).fract()),
            T9::from_uniform((i * 0.6569003352134373807658107580209616571664810180664062500).fract()),
            T10::from_uniform((i * 0.6298678360407388154840191418770700693130493164062500000).fract()),
            T11::from_uniform((i * 0.6039477674337584423014391177275683730840682983398437500).fract()),
            T12::from_uniform((i * 0.5790943510959488671474559851048979908227920532226562500).fract()),
            T13::from_uniform((i * 0.5552636925808648316049698223650921136140823364257812500).fract()),
            T14::from_uniform((i * 0.5324137037687192153256887650059070438146591186523437500).fract()),
            T15::from_uniform((i * 0.5105040285331524652079338011390063911676406860351562500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9611549719965046811864795017754659056663513183593750000).fract()),
            T1::from_uniform((i * 0.9238188801936016991689371025131549686193466186523437500).fract()),
            T2::from_uniform((i * 0.8879331099223235490569550165673717856407165527343750000).fract()),
            T3::from_uniform((i * 0.8534413234021601679657464956108015030622482299804687500).fract()),
            T4::from_uniform((i * 0.8202893712952631366519540279114153236150741577148437500).fract()),
            T5::from_uniform((i * 0.7884252076963290667421802027092780917882919311523437500).fract()),
            T6::from_uniform((i * 0.7577988084247035960316907221567817032337188720703125000).fract()),
            T7::from_uniform((i * 0.7283620924904304905211915865947958081960678100585937500).fract()),
            T8::from_uniform((i * 0.7000688466109553642624518943193834275007247924804687500).fract()),
            T9::from_uniform((i * 0.6728746526599780342081658091046847403049468994140625000).fract()),
            T10::from_uniform((i * 0.6467368179345590606388327614695299416780471801757812500).fract()),
            T11::from_uniform((i * 0.6216143081309996043515297969861421734094619750976562500).fract()),
            T12::from_uniform((i * 0.5974676829242775433215228986227884888648986816406250000).fract()),
            T13::from_uniform((i * 0.5742590340499005296948098475695587694644927978515625000).fract()),
            T14::from_uniform((i * 0.5519519257909719645027735168696381151676177978515625000).fract()),
            T15::from_uniform((i * 0.5305113377770385163501032366184517741203308105468750000).fract()),
            T16::from_uniform((i * 0.5099036100049175734838513562863226979970932006835937500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9632166633389043219892755587352439761161804199218750000).fract()),
            T1::from_uniform((i * 0.9277863405337319901988735182385426014661788940429687500).fract()),
            T2::from_uniform((i * 0.8936592632203137487323374443803913891315460205078125000).fract()),
            T3::from_uniform((i * 0.8607874936809741805987528096011374145746231079101562500).fract()),
            T4::from_uniform((i * 0.8291248575072462934087980102049186825752258300781250000).fract()),
            T5::from_uniform((i * 0.7986268787394741330842862225836142897605895996093750000).fract()),
            T6::from_uniform((i * 0.7692507173922000784926922278827987611293792724609375000).fract()),
            T7::from_uniform((i * 0.7409551092775732428208357305265963077545166015625000000).fract()),
            T8::from_uniform((i * 0.7137003080422573697561006156320217996835708618164062500).fract()),
            T9::from_uniform((i * 0.6874480293364113592247122141998261213302612304687500000).fract()),
            T10::from_uniform((i * 0.6621613970363232626326066565525252372026443481445312500).fract()),
            T11::from_uniform((i * 0.6378048914451547313220203250239137560129165649414062500).fract()),
            T12::from_uniform((i * 0.6143442993990340106336134340381249785423278808593750000).fract()),
            T13::from_uniform((i * 0.5917466662084143180777573434170335531234741210937500000).fract()),
            T14::from_uniform((i * 0.5699802493671892733573258738033473491668701171875000000).fract()),
            T15::from_uniform((i * 0.5490144739645406168904173682676628232002258300781250000).fract()),
            T16::from_uniform((i * 0.5288198897368886486347605568880680948495864868164062500).fract()),
            T17::from_uniform((i * 0.5093681296996130924981116550043225288391113281250000000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9650705109167201367625921193393878638744354248046875000).fract()),
            T1::from_uniform((i * 0.9313610910410593524133560094924177974462509155273437500).fract()),
            T2::from_uniform((i * 0.8988291239789490960632178939704317599534988403320312500).fract()),
            T3::from_uniform((i * 0.8674334819051923162191997107584029436111450195312500000).fract()),
            T4::from_uniform((i * 0.8371344735685135596270356472814455628395080566406250000).fract()),
            T5::from_uniform((i * 0.8078937941127649624561968266789335757493972778320312500).fract()),
            T6::from_uniform((i * 0.7796744766508536539362239636830054223537445068359375000).fract()),
            T7::from_uniform((i * 0.7524408455301656584168767949449829757213592529296875000).fract()),
            T8::from_uniform((i * 0.7261584712304059996412775035423692315816879272460937500).fract()),
            T9::from_uniform((i * 0.7007941268368322873527631600154563784599304199218750000).fract()),
            T10::from_uniform((i * 0.6763157460338585780235121092118788510560989379882812500).fract()),
            T11::from_uniform((i * 0.6526923825659186606529260643583256751298904418945312500).fract()),
            T12::from_uniform((i * 0.6298941711143425381536076201882679015398025512695312500).fract()),
            T13::from_uniform((i * 0.6078922895407824489311110482958611100912094116210937500).fract()),
            T14::from_uniform((i * 0.5866589224494577203827816447301302105188369750976562500).fract()),
            T15::from_uniform((i * 0.5661672260221506380872824593097902834415435791015625000).fract()),
            T16::from_uniform((i * 0.5463912940814991126003974386549089103937149047851562500).fract()),
            T17::from_uniform((i * 0.5273061253396802428028422582428902387619018554687500000).fract()),
            T18::from_uniform((i * 0.5088875917910813395650393431424163281917572021484375000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9667464397509411000442014483269304037094116210937500000).fract()),
            T1::from_uniform((i * 0.9345986787711201282391471067967358976602554321289062500).fract()),
            T2::from_uniform((i * 0.9035199452979137957342459230858366936445236206054687500).fract()),
            T3::from_uniform((i * 0.8734746903607232271227189812634605914354324340820312500).fract()),
            T4::from_uniform((i * 0.8444285471187849001495351330959238111972808837890625000).fract()),
            T5::from_uniform((i * 0.8163482915511450777046320581575855612754821777343750000).fract()),
            T6::from_uniform((i * 0.7892018044538329224479866752517409622669219970703125000).fract()),
            T7::from_uniform((i * 0.7629580347007614005150344382855109870433807373046875000).fract()),
            T8::from_uniform((i * 0.7375869637263360312218196668254677206277847290039062500).fract()),
            T9::from_uniform((i * 0.7130595711891418719829971450963057577610015869140625000).fract()),
            T10::from_uniform((i * 0.6893478017774357091695947019616141915321350097656250000).fract()),
            T11::from_uniform((i * 0.6664245331184733833751465681416448205709457397460937500).fract()),
            T12::from_uniform((i * 0.6442635447549673877176701353164389729499816894531250000).fract()),
            T13::from_uniform((i * 0.6228394881531857940615282132057473063468933105468750000).fract()),
            T14::from_uniform((i * 0.6021278577083908345457530231215059757232666015625000000).fract()),
            T15::from_uniform((i * 0.5821049627144481153351307511911727488040924072265625000).fract()),
            T16::from_uniform((i * 0.5627479002655471074234583284123800694942474365234375000).fract()),
            T17::from_uniform((i * 0.5440345290590353766191356044146232306957244873046875000).fract()),
            T18::from_uniform((i * 0.5259434440694022994122747149958740919828414916992187500).fract()),
            T19::from_uniform((i * 0.5084539520644429932971775087935384362936019897460937500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9682688926142339891356414227630011737346649169921875000).fract()),
            T1::from_uniform((i * 0.9375446484043948869313567229255568236112594604492187500).fract()),
            T2::from_uniform((i * 0.9077953184869249625421616656240075826644897460937500000).fract()),
            T3::from_uniform((i * 0.8789899677517205578425318890367634594440460205078125000).fract()),
            T4::from_uniform((i * 0.8510986426939797233615081495372578501701354980468750000).fract()),
            T5::from_uniform((i * 0.8240923402667773567387143884843681007623672485351562500).fract()),
            T6::from_uniform((i * 0.7979429777219850805636269797105342149734497070312500000).fract()),
            T7::from_uniform((i * 0.7726233634081709489294098602840676903724670410156250000).fract()),
            T8::from_uniform((i * 0.7481071684951144940001199756807181984186172485351562500).fract()),
            T9::from_uniform((i * 0.7243688995955346321409251686418429017066955566406250000).fract()),
            T10::from_uniform((i * 0.7013838722555595373009396098495926707983016967773437500).fract()),
            T11::from_uniform((i * 0.6791281852863740864378883088647853583097457885742187500).fract()),
            T12::from_uniform((i * 0.6575786959103517848035380666260607540607452392578125000).fract()),
            T13::from_uniform((i * 0.6367129956958283987233926382032223045825958251953125000).fract()),
            T14::from_uniform((i * 0.6165093872554913145833666021644603461027145385742187500).fract()),
            T15::from_uniform((i * 0.5969468616841544506002037451253272593021392822265625000).fract()),
            T16::from_uniform((i * 0.5780050767124585986422857786237727850675582885742187500).fract()),
            T17::from_uniform((i * 0.5596643355537775921249021848780103027820587158203125000).fract()),
            T18::from_uniform((i * 0.5419055664223373369736691529396921396255493164062500000).fract()),
            T19::from_uniform((i * 0.5247103027012457454603122641856316477060317993164062500).fract()),
            T20::from_uniform((i * 0.5080606637398147329420794449106324464082717895507812500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9696580306006656879702632068074308335781097412109375000).fract()),
            T1::from_uniform((i * 0.9402366963083614859186809553648345172405242919921875000).fract()),
            T2::from_uniform((i * 0.9117080632408420814982719093677587807178497314453125000).fract()),
            T3::from_uniform((i * 0.8840450450848620356225637806346639990806579589843750000).fract()),
            T4::from_uniform((i * 0.8572213773792640711945978182484395802021026611328125000).fract()),
            T5::from_uniform((i * 0.8312115925783672976123739317699801176786422729492187500).fract()),
            T6::from_uniform((i * 0.8059909958719825295858640856749843806028366088867187500).fract()),
            T7::from_uniform((i * 0.7815356417390958432278580403362866491079330444335937500).fract()),
            T8::from_uniform((i * 0.7578223112129591765295799632440321147441864013671875000).fract()),
            T9::from_uniform((i * 0.7348284898360026851094062294578179717063903808593750000).fract()),
            T10::from_uniform((i * 0.7125323462836397059305681978003121912479400634765625000).fract()),
            T11::from_uniform((i * 0.6909127116366656773394083757011685520410537719726562500).fract()),
            T12::from_uniform((i * 0.6699490592825748658256657108722720295190811157226562500).fract()),
            T13::from_uniform((i * 0.6496214854267101657114835688844323158264160156250000000).fract()),
            T14::from_uniform((i * 0.6299106901947427727961326127115171402692794799804687500).fract()),
            T15::from_uniform((i * 0.6107979593085404168562035920331254601478576660156250000).fract()),
            T16::from_uniform((i * 0.5922651463180247377593445889942813664674758911132812500).fract()),
            T17::from_uniform((i * 0.5742946553721510749568324172287248075008392333984375000).fract()),
            T18::from_uniform((i * 0.5568694245126479813734476920217275619506835937500000000).fract()),
            T19::from_uniform((i * 0.5399729094746603674792595484177581965923309326171875000).fract()),
            T20::from_uniform((i * 0.5235890679789106938457621254201512783765792846679687500).fract()),
            T21::from_uniform((i * 0.5077023445004685830994617390388157218694686889648437500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9709306314075442090327783262182492762804031372070312500).fract()),
            T1::from_uniform((i * 0.9427062910054524458303149003768339753150939941406250000).fract()),
            T2::from_uniform((i * 0.9153024143577880300526317114417906850576400756835937500).fract()),
            T3::from_uniform((i * 0.8886951511012567417324703455960843712091445922851562500).fract()),
            T4::from_uniform((i * 0.8628613441875659928470554405066650360822677612304687500).fract()),
            T5::from_uniform((i * 0.8377785097291957638887538450944703072309494018554687500).fract()),
            T6::from_uniform((i * 0.8134248174310394485786446239217184484004974365234375000).fract()),
            T7::from_uniform((i * 0.7897790715908853398374844800855498760938644409179687500).fract()),
            T8::from_uniform((i * 0.7668206926522024291514867400110233575105667114257812500).fract()),
            T9::from_uniform((i * 0.7445296992931732527054577985836658626794815063476562500).fract()),
            T10::from_uniform((i * 0.7228866910363896947089301647793035954236984252929687500).fract()),
            T11::from_uniform((i * 0.7018728313640720806176886981120333075523376464843750000).fract()),
            T12::from_uniform((i * 0.6814698313241193128320105643069837242364883422851562500).fract()),
            T13::from_uniform((i * 0.6616599336127197972245994606055319309234619140625000000).fract()),
            T14::from_uniform((i * 0.6424258971196717959983857326733414083719253540039062500).fract()),
            T15::from_uniform((i * 0.6237509819229609675517167488578706979751586914062500000).fract()),
            T16::from_uniform((i * 0.6056189347195360950237841279886197298765182495117187500).fract()),
            T17::from_uniform((i * 0.5880139746796034794229512954188976436853408813476562500).fract()),
            T18::from_uniform((i * 0.5709207797121270688833760686975438147783279418945312500).fract()),
            T19::from_uniform((i * 0.5543244731295828842121409252285957336425781250000000000).fract()),
            T20::from_uniform((i * 0.5382106107003602479821324777731206268072128295898437500).fract()),
            T21::from_uniform((i * 0.5225651680775406093815149688452947884798049926757812500).fract()),
            T22::from_uniform((i * 0.5073745285931160475811907417664770036935806274414062500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9721007705580276825330088286136742681264877319335937500).fract()),
            T1::from_uniform((i * 0.9449799081195110472819465030624996870756149291992187500).fract()),
            T2::from_uniform((i * 0.9186156968448309090291559186880476772785186767578125000).fract()),
            T3::from_uniform((i * 0.8929870267495596536377888696733862161636352539062500000).fract()),
            T4::from_uniform((i * 0.8680733768015688189834122567845042794942855834960937500).fract()),
            T5::from_uniform((i * 0.8438547984897142306692785496124997735023498535156250000).fract()),
            T6::from_uniform((i * 0.8203118998509403292374031479994300752878189086914062500).fract()),
            T7::from_uniform((i * 0.7974258299430186935907727274752687662839889526367187500).fract()),
            T8::from_uniform((i * 0.7751782637504831541264138650149106979370117187500000000).fract()),
            T9::from_uniform((i * 0.7535513875116787163577214414544869214296340942382812500).fract()),
            T10::from_uniform((i * 0.7325278844551736945334141637431457638740539550781250000).fract()),
            T11::from_uniform((i * 0.7120909209341161894002425469807349145412445068359375000).fract()),
            T12::from_uniform((i * 0.6922241329474299043056362279457971453666687011718750000).fract()),
            T13::from_uniform((i * 0.6729116130370591530862611762131564319133758544921875000).fract()),
            T14::from_uniform((i * 0.6541378975507704529590569109132047742605209350585937500).fract()),
            T15::from_uniform((i * 0.6358879542603120826882445726369041949510574340820312500).fract()),
            T16::from_uniform((i * 0.6181471703250173144184032025805208832025527954101562500).fract()),
            T17::from_uniform((i * 0.6009013405912135841191457075183279812335968017578125000).fract()),
            T18::from_uniform((i * 0.5841366562180706489826320648717228323221206665039062500).fract()),
            T19::from_uniform((i * 0.5678396936207761314108211081475019454956054687500000000).fract()),
            T20::from_uniform((i * 0.5519974037221907492423156327276956290006637573242187500).fract()),
            T21::from_uniform((i * 0.5365971015043723424398081078834366053342819213867187500).fract()),
            T22::from_uniform((i * 0.5216264558516044980152059906686190515756607055664062500).fract()),
            T23::from_uniform((i * 0.5070734796767977226039647575817070901393890380859375000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9731803443915576501410669152392074465751647949218750000).fract()),
            T1::from_uniform((i * 0.9470799827100707668492418633832130581140518188476562500).fract()),
            T2::from_uniform((i * 0.9216796237401371216790835205756593495607376098632812500).fract()),
            T3::from_uniform((i * 0.8969604936501081038358051955583505332469940185546875000).fract()),
            T4::from_uniform((i * 0.8729043221160337484576530187041498720645904541015625000).fract()),
            T5::from_uniform((i * 0.8494933288177608510238769667921587824821472167968750000).fract()),
            T6::from_uniform((i * 0.8267102102971993771163283781788777559995651245117187500).fract()),
            T7::from_uniform((i * 0.8045381271690454916267754015279933810234069824218750000).fract()),
            T8::from_uniform((i * 0.7829606916745105449351171955640893429517745971679687500).fract()),
            T9::from_uniform((i * 0.7619619555688524892289592571614775806665420532226562500).fract()),
            T10::from_uniform((i * 0.7415263983337605502299538784427568316459655761718750000).fract()),
            T11::from_uniform((i * 0.7216389157058804570965548919048160314559936523437500000).fract()),
            T12::from_uniform((i * 0.7022848085129990147734702077286783605813980102539062500).fract()),
            T13::from_uniform((i * 0.6834497718096395058040570802404545247554779052734375000).fract()),
            T14::from_uniform((i * 0.6651198843040364572232192585943266749382019042968750000).fract()),
            T15::from_uniform((i * 0.6472815980686752457273769323364831507205963134765625000).fract()),
            T16::from_uniform((i * 0.6299217285267912913582222245167940855026245117187500000).fract()),
            T17::from_uniform((i * 0.6130274447074279819958064763341099023818969726562500000).fract()),
            T18::from_uniform((i * 0.5965862597618514229225183953531086444854736328125000000).fract()),
            T19::from_uniform((i * 0.5805860217343098428344205785833764821290969848632812500).fract()),
            T20::from_uniform((i * 0.5650149045803199987503262491372879594564437866210937500).fract()),
            T21::from_uniform((i * 0.5498613994258388926184011324949096888303756713867187500).fract()),
            T22::from_uniform((i * 0.5351143060608617441076262366550508886575698852539062500).fract()),
            T23::from_uniform((i * 0.5207627246611589155733668121683876961469650268554687500).fract()),
            T24::from_uniform((i * 0.5067960477320324619299185542331542819738388061523437500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9741794761063388152777520190284121781587600708007812500).fract()),
            T1::from_uniform((i * 0.9490256516668206243636518593120854347944259643554687500).fract()),
            T2::from_uniform((i * 0.9245213121522601884549885653541423380374908447265625000).fract()),
            T3::from_uniform((i * 0.9006496875216336572833597529097460210323333740234375000).fract()),
            T4::from_uniform((i * 0.8773944407451628180183433869387954473495483398437500000).fract()),
            T5::from_uniform((i * 0.8547396566237369652796473928901832550764083862304687500).fract()),
            T6::from_uniform((i * 0.8326698308970239548187919353949837386608123779296875000).fract()),
            T7::from_uniform((i * 0.8111698596328164034829910633561667054891586303710937500).fract()),
            T8::from_uniform((i * 0.7902250288903495123449260972847696393728256225585937500).fract()),
            T9::from_uniform((i * 0.7698210046505171710862214240478351712226867675781250000).fract()),
            T10::from_uniform((i * 0.7499438230060960774991940525069367140531539916992187500).fract()),
            T11::from_uniform((i * 0.7305798806052635763208513708377722650766372680664062500).fract()),
            T12::from_uniform((i * 0.7117159253418672282265333706163801252841949462890625000).fract()),
            T13::from_uniform((i * 0.6933390472860783138031592898187227547168731689453125000).fract()),
            T14::from_uniform((i * 0.6754366698492197951253501742030493915081024169921875000).fract()),
            T15::from_uniform((i * 0.6579965411767231264761335296498145908117294311523437500).fract()),
            T16::from_uniform((i * 0.6410067257633230708435689848556648939847946166992187500).fract()),
            T17::from_uniform((i * 0.6244555962847536667581493929901625961065292358398437500).fract()),
            T18::from_uniform((i * 0.6083318256403527080067306087585166096687316894531250000).fract()),
            T19::from_uniform((i * 0.5926243792011314237555552608682774007320404052734375000).fract()),
            T20::from_uniform((i * 0.5773225072580024930246622716367710381746292114257812500).fract()),
            T21::from_uniform((i * 0.5624157376649988604455643326218705624341964721679687500).fract()),
            T22::from_uniform((i * 0.5478938686724486029078207138809375464916229248046875000).fract()),
            T23::from_uniform((i * 0.5337469619452012148386188528093043714761734008789062500).fract()),
            T24::from_uniform((i * 0.5199653357611260240389583486830815672874450683593750000).fract()),
            T25::from_uniform((i * 0.5065395583852302374694431819079909473657608032226562500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
    T26: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9751068342693569590551305736880749464035034179687500000).fract()),
            T1::from_uniform((i * 0.9508333382388071131074980257835704833269119262695312500).fract()),
            T2::from_uniform((i * 0.9271640863678077826293133512081112712621688842773437500).fract()),
            T3::from_uniform((i * 0.9040840371063536551332617818843573331832885742187500000).fract()),
            T4::from_uniform((i * 0.8815785233362363193521105131367221474647521972656250000).fract()),
            T5::from_uniform((i * 0.8596332430502517940595907930401153862476348876953125000).fract()),
            T6::from_uniform((i * 0.8382342502634317904508520769013557583093643188476562500).fract()),
            T7::from_uniform((i * 0.8173679461505226617745734074560459703207015991210937500).fract()),
            T8::from_uniform((i * 0.7970210704040824323257652395113836973905563354492187500).fract()),
            T9::from_uniform((i * 0.7771806928076989695597376339719630777835845947265625000).fract()),
            T10::from_uniform((i * 0.7578342050189809109284055921307299286127090454101562500).fract()),
            T11::from_uniform((i * 0.7389693125570934162382741305918898433446884155273437500).fract()),
            T12::from_uniform((i * 0.7205740269897502603413386168540455400943756103515625000).fract()),
            T13::from_uniform((i * 0.7026366583146974598150791280204430222511291503906250000).fract()),
            T14::from_uniform((i * 0.6851458075308444195528068121348042041063308715820312500).fract()),
            T15::from_uniform((i * 0.6680903593943239293651004118146374821662902832031250000).fract()),
            T16::from_uniform((i * 0.6514594753548760275307927258836571127176284790039062500).fract()),
            T17::from_uniform((i * 0.6352425866680693200549967514234595000743865966796875000).fract()),
            T18::from_uniform((i * 0.6194293876789787045566981760202907025814056396484375000).fract()),
            T19::from_uniform((i * 0.6040098292730550211260265314194839447736740112304687500).fract()),
            T20::from_uniform((i * 0.5889741124900235158534655965922866016626358032226562500).fract()),
            T21::from_uniform((i * 0.5743126822967509204076463902310933917760848999023437500).fract()),
            T22::from_uniform((i * 0.5600162215151276434710325702326372265815734863281250000).fract()),
            T23::from_uniform((i * 0.5460756449011031632423396331432741135358810424804687500).fract()),
            T24::from_uniform((i * 0.5324820933711120751752332580508664250373840332031250000).fract()),
            T25::from_uniform((i * 0.5192269283722252826152043780894018709659576416015625000).fract()),
            T26::from_uniform((i * 0.5063017263924427524557358992751687765121459960937500000).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
    T26: FromUniform,
    T27: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9759698850464325614595395563810598105192184448242187500).fract()),
            T1::from_uniform((i * 0.9525172165175468386166812706505879759788513183593750000).fract()),
            T2::from_uniform((i * 0.9296281183093781930182331052492372691631317138671875000).fract()),
            T3::from_uniform((i * 0.9072890477623350991009942845266778022050857543945312500).fract()),
            T4::from_uniform((i * 0.8854867876484934230418843981169629842042922973632812500).fract()),
            T5::from_uniform((i * 0.8642084383514351264565789279004093259572982788085937500).fract()),
            T6::from_uniform((i * 0.8434414102340070940044824965298175811767578125000000000).fract()),
            T7::from_uniform((i * 0.8231734161894849188811917883867863565683364868164062500).fract()),
            T8::from_uniform((i * 0.8033924643717308411439148585486691445112228393554687500).fract()),
            T9::from_uniform((i * 0.7840868511000482765638253113138489425182342529296875000).fract()),
            T10::from_uniform((i * 0.7652451539345334063924042311555240303277969360351562500).fract()),
            T11::from_uniform((i * 0.7468562249178262169024833383446093648672103881835937500).fract()),
            T12::from_uniform((i * 0.7289091839792634086592215680866502225399017333984375000).fract()),
            T13::from_uniform((i * 0.7113934124975306305671551854175049811601638793945312500).fract()),
            T14::from_uniform((i * 0.6942985470180044194066226737049873918294906616210937500).fract()),
            T15::from_uniform((i * 0.6776144731210669291954218351747840642929077148437500000).fract()),
            T16::from_uniform((i * 0.6613313194377665737988536420743912458419799804687500000).fract()),
            T17::from_uniform((i * 0.6454394518092826382726912015641573816537857055664062500).fract()),
            T18::from_uniform((i * 0.6299294675867380677303231095720548182725906372070312500).fract()),
            T19::from_uniform((i * 0.6147921900679892415197969057771842926740646362304687500).fract()),
            T20::from_uniform((i * 0.6000186630681000332643293404544238001108169555664062500).fract()),
            T21::from_uniform((i * 0.5856001456202877264445305627305060625076293945312500000).fract()),
            T22::from_uniform((i * 0.5715281068042062928569180257909465581178665161132812500).fract()),
            T23::from_uniform((i * 0.5577942206985064821367359400028362870216369628906250000).fract()),
            T24::from_uniform((i * 0.5443903614546857783196287527971435338258743286132812500).fract()),
            T25::from_uniform((i * 0.5313085984893156643593670196423772722482681274414062500).fract()),
            T26::from_uniform((i * 0.5185411917917985835657646020990796387195587158203125000).fract()),
            T27::from_uniform((i * 0.5060805873448818159587858644954394549131393432617187500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
    T26: FromUniform,
    T27: FromUniform,
    T28: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9767750937050804216355004427896346896886825561523437500).fract()),
            T1::from_uniform((i * 0.9540895836825684650506218531518243253231048583984375000).fract()),
            T2::from_uniform((i * 0.9319309425045819716970640911313239485025405883789062500).fract()),
            T3::from_uniform((i * 0.9102869336915769826745759019104298204183578491210937500).fract()),
            T4::from_uniform((i * 0.8891456049551004214848148876626510173082351684570312500).fract()),
            T5::from_uniform((i * 0.8684952815974785744757014072092715650796890258789062500).fract()),
            T6::from_uniform((i * 0.8483245600647971729202367896505165845155715942382812500).fract()),
            T7::from_uniform((i * 0.8286223016496133686459302225557621568441390991210937500).fract()),
            T8::from_uniform((i * 0.8093776263399206083448689241777174174785614013671875000).fract()),
            T9::from_uniform((i * 0.7905799068109713445551278709899634122848510742187500000).fract()),
            T10::from_uniform((i * 0.7722187625566403479382415753207169473171234130859375000).fract()),
            T11::from_uniform((i * 0.7542840541570835499740610430308151990175247192382812500).fract()),
            T12::from_uniform((i * 0.7367658776795331654341225657844915986061096191406250000).fract()),
            T13::from_uniform((i * 0.7196545592091317944394290861964691430330276489257812500).fract()),
            T14::from_uniform((i * 0.7029406495067880289440154228941537439823150634765625000).fract()),
            T15::from_uniform((i * 0.6866149187911029239117510769574437290430068969726562500).fract()),
            T16::from_uniform((i * 0.6706683516414856383036635634198319166898727416992187500).fract()),
            T17::from_uniform((i * 0.6550921420196440525529624210321344435214996337890625000).fract()),
            T18::from_uniform((i * 0.6398776884066995629396501499286387115716934204101562500).fract()),
            T19::from_uniform((i * 0.6250165890532441981264355490566231310367584228515625000).fract()),
            T20::from_uniform((i * 0.6105006373397122709789641703537199646234512329101562500).fract()),
            T21::from_uniform((i * 0.5963218172445087228439319915196392685174942016601562500).fract()),
            T22::from_uniform((i * 0.5824722989173888310077131791331339627504348754882812500).fract()),
            T23::from_uniform((i * 0.5689444343556461225475118226313497871160507202148437500).fract()),
            T24::from_uniform((i * 0.5557307531807201828044640024018008261919021606445312500).fract()),
            T25::from_uniform((i * 0.5428239585128928901269773632520809769630432128906250000).fract()),
            T26::from_uniform((i * 0.5302169229417935669701478218485135585069656372070312500).fract()),
            T27::from_uniform((i * 0.5179026845904898257444415321515407413244247436523437500).fract()),
            T28::from_uniform((i * 0.5058744432709884053522841895755846053361892700195312500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
    T26: FromUniform,
    T27: FromUniform,
    T28: FromUniform,
    T29: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9775280869070945843901654370711185038089752197265625000).fract()),
            T1::from_uniform((i * 0.9555611606922442824441077391384169459342956542968750000).fract()),
            T2::from_uniform((i * 0.9340878733342123929617173416772857308387756347656250000).fract()),
            T3::from_uniform((i * 0.9130971318235091560566729640413541346788406372070312500).fract()),
            T4::from_uniform((i * 0.8925780924317900932862812624080106616020202636718750000).fract()),
            T5::from_uniform((i * 0.8725201551100315588982425651920493692159652709960937500).fract()),
            T6::from_uniform((i * 0.8529129580125907050813793830457143485546112060546875000).fract()),
            T7::from_uniform((i * 0.8337463721443189035298360067827161401510238647460937500).fract()),
            T8::from_uniform((i * 0.8150104961279666104800867287849541753530502319335937500).fract()),
            T9::from_uniform((i * 0.7966956510891732845536239437933545559644699096679687500).fract()),
            T10::from_uniform((i * 0.7787923756564015809189527317357715219259262084960937500).fract()),
            T11::from_uniform((i * 0.7612914210732336650622187335102353245019912719726562500).fract()),
            T12::from_uniform((i * 0.7441837464205015573170953757653478533029556274414062500).fract()),
            T13::from_uniform((i * 0.7274605139457872571284724472207017242908477783203125000).fract()),
            T14::from_uniform((i * 0.7111130844978772458375715359579771757125854492187500000).fract()),
            T15::from_uniform((i * 0.6951330130638130322395795701595488935708999633789062500).fract()),
            T16::from_uniform((i * 0.6795120444062335840484934124106075614690780639648437500).fract()),
            T17::from_uniform((i * 0.6642421087987542271946495020529255270957946777343750000).fract()),
            T18::from_uniform((i * 0.6493153178571804406971068601706065237522125244140625000).fract()),
            T19::from_uniform((i * 0.6347239604644016042200860283628571778535842895507812500).fract()),
            T20::from_uniform((i * 0.6204604987868609367041017321753315627574920654296875000).fract()),
            T21::from_uniform((i * 0.6065175643805417182718997537449467927217483520507812500).fract()),
            T22::from_uniform((i * 0.5928879543844616240022560305078513920307159423828125000).fract()),
            T23::from_uniform((i * 0.5795646277997035245022061644704081118106842041015625000).fract()),
            T24::from_uniform((i * 0.5665407018520665083372023218544200062751770019531250000).fract()),
            T25::from_uniform((i * 0.5538094484364532998910135574988089501857757568359375000).fract()),
            T26::from_uniform((i * 0.5413642906411594291071764928346965461969375610351562500).fract()),
            T27::from_uniform((i * 0.5291987993502689224811774693080224096775054931640625000).fract()),
            T28::from_uniform((i * 0.5173066899223998094115017920557875186204910278320312500).fract()),
            T29::from_uniform((i * 0.5056818189440851485372263596218544989824295043945312500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
    T26: FromUniform,
    T27: FromUniform,
    T28: FromUniform,
    T29: FromUniform,
    T30: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9782337844131517856638424746051896363496780395507812500).fract()),
            T1::from_uniform((i * 0.9569413369672766789264528597414027899503707885742187500).fract()),
            T2::from_uniform((i * 0.9361123455228802514582753246941138058900833129882812500).fract()),
            T3::from_uniform((i * 0.9157367223967191049993630258541088551282882690429687500).fract()),
            T4::from_uniform((i * 0.8958045994762381392106931343732867389917373657226562500).fract()),
            T5::from_uniform((i * 0.8763063234403483114931532327318564057350158691406250000).fract()),
            T6::from_uniform((i * 0.8572324510842272982102940659387968480587005615234375000).fract()),
            T7::from_uniform((i * 0.8385737447458856408388783165719360113143920898437500000).fract()),
            T8::from_uniform((i * 0.8203211678322759325965307652950286865234375000000000000).fract()),
            T9::from_uniform((i * 0.8024658804427835523398471195832826197147369384765625000).fract()),
            T10::from_uniform((i * 0.7849992350879760882875757488363888114690780639648437500).fract()),
            T11::from_uniform((i * 0.7679127725015401084718291713215876370668411254882812500).fract()),
            T12::from_uniform((i * 0.7511982175433773445405449820100329816341400146484375000).fract()),
            T13::from_uniform((i * 0.7348474751918721015186974909738637506961822509765625000).fract()),
            T14::from_uniform((i * 0.7188526266233946637740359619783703237771987915039062500).fract()),
            T15::from_uniform((i * 0.7032059253771377749231419329589698463678359985351562500).fract()),
            T16::from_uniform((i * 0.6878997936034297877583298941317480057477951049804687500).fract()),
            T17::from_uniform((i * 0.6729268183937092695501291927939746528863906860351562500).fract()),
            T18::from_uniform((i * 0.6582797481903799319269410261767916381359100341796875000).fract()),
            T19::from_uniform((i * 0.6439514892748119390120109528652392327785491943359375000).fract()),
            T20::from_uniform((i * 0.6299351023317842912518926823395304381847381591796875000).fract()),
            T21::from_uniform((i * 0.6162237990887073912915639084530994296073913574218750000).fract()),
            T22::from_uniform((i * 0.6028109390279959844960444570460822433233261108398437500).fract()),
            T23::from_uniform((i * 0.5896900261710021906580436734657268971204757690429687500).fract()),
            T24::from_uniform((i * 0.5768547059319499847873657927266322076320648193359375000).fract()),
            T25::from_uniform((i * 0.5642987620403472348584728024434298276901245117187500000).fract()),
            T26::from_uniform((i * 0.5520161135303854882394603009743150323629379272460937500).fract()),
            T27::from_uniform((i * 0.5400008117958690068149962826282717287540435791015625000).fract()),
            T28::from_uniform((i * 0.5282470377092470803503942988754715770483016967773437500).fract()),
            T29::from_uniform((i * 0.5167490988033536236656573237269185483455657958984375000).fract()),
            T30::from_uniform((i * 0.5055014265144902596560427809890825301408767700195312500).fract()),
        )
    }
}
impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31> Quasirandom for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31) where
    T0: FromUniform,
    T1: FromUniform,
    T2: FromUniform,
    T3: FromUniform,
    T4: FromUniform,
    T5: FromUniform,
    T6: FromUniform,
    T7: FromUniform,
    T8: FromUniform,
    T9: FromUniform,
    T10: FromUniform,
    T11: FromUniform,
    T12: FromUniform,
    T13: FromUniform,
    T14: FromUniform,
    T15: FromUniform,
    T16: FromUniform,
    T17: FromUniform,
    T18: FromUniform,
    T19: FromUniform,
    T20: FromUniform,
    T21: FromUniform,
    T22: FromUniform,
    T23: FromUniform,
    T24: FromUniform,
    T25: FromUniform,
    T26: FromUniform,
    T27: FromUniform,
    T28: FromUniform,
    T29: FromUniform,
    T30: FromUniform,
    T31: FromUniform,
{
    fn from_f64(i: f64) -> Self {
        (
            T0::from_uniform((i * 0.9788965067209499659739435628580395132303237915039062500).fract()),
            T1::from_uniform((i * 0.9582383708704786950960397007293067872524261474609375000).fract()),
            T2::from_uniform((i * 0.9380161938510858110618073624209500849246978759765625000).fract()),
            T3::from_uniform((i * 0.9182207754085093265317141231207642704248428344726562500).fract()),
            T4::from_uniform((i * 0.8988431094459916614880512497620657086372375488281250000).fract()),
            T5::from_uniform((i * 0.8798743799268776699662453211203683167695999145507812500).fract()),
            T6::from_uniform((i * 0.8613059568636824980814026275766082108020782470703125000).fract()),
            T7::from_uniform((i * 0.8431293923918039556753001306788064539432525634765625000).fract()),
            T8::from_uniform((i * 0.8253364169260940519379232682695146650075912475585937500).fract()),
            T9::from_uniform((i * 0.8079189353985388732937167333147954195737838745117187500).fract()),
            T10::from_uniform((i * 0.7908690235753386144068599605816416442394256591796875000).fract()),
            T11::from_uniform((i * 0.7741789244517075507800996092555578798055648803710937500).fract()),
            T12::from_uniform((i * 0.7578410447227588164764711109455674886703491210937500000).fract()),
            T13::from_uniform((i * 0.7418479513288637194889929560304153710603713989257812500).fract()),
            T14::from_uniform((i * 0.7261923680739179598475629973108880221843719482421875000).fract()),
            T15::from_uniform((i * 0.7108671723149726506818524285336025059223175048828125000).fract()),
            T16::from_uniform((i * 0.6958653917217262341310402007366064935922622680664062500).fract()),
            T17::from_uniform((i * 0.6811802011044032489905930560780689120292663574218750000).fract()),
            T18::from_uniform((i * 0.6668049193085745507403316878480836749076843261718750000).fract()),
            T19::from_uniform((i * 0.6527330061755085566232992277946323156356811523437500000).fract()),
            T20::from_uniform((i * 0.6389580595666695117529343406204134225845336914062500000).fract()),
            T21::from_uniform((i * 0.6254738124510094143815308598277624696493148803710937500).fract()),
            T22::from_uniform((i * 0.6122741300537277719939766029710881412029266357421875000).fract()),
            T23::from_uniform((i * 0.5993530070652026697786141085089184343814849853515625000).fract()),
            T24::from_uniform((i * 0.5867045649088237224688668902672361582517623901367187500).fract()),
            T25::from_uniform((i * 0.5743230490664823495450264090322889387607574462890625000).fract()),
            T26::from_uniform((i * 0.5622028264605043457180499899550341069698333740234375000).fract()),
            T27::from_uniform((i * 0.5503383828908321451223173426114954054355621337890625000).fract()),
            T28::from_uniform((i * 0.5387243205262921552645138945081271231174468994140625000).fract()),
            T29::from_uniform((i * 0.5273553554488047412363016519520897418260574340820312500).fract()),
            T30::from_uniform((i * 0.5162263152494198648057022182911168783903121948242187500).fract()),
            T31::from_uniform((i * 0.5053321366750849197302386528463102877140045166015625000).fract()),
        )
    }
}

mod private {
    use super::FromUniform;

    pub trait Sealed {}

    // Generated by the following python:
    // for d in xrange(1, 33):
    // 
    //     parameters = ["T"+str(n) for n in xrange(d)]
    //     joined = ','.join(parameters)
    // 
    //     print "impl <%s> Sealed for (%s) where" % (joined, joined)
    //     for parameter in parameters:
    //         print "    %s: FromUniform," % parameter
    //     print "{}"

    impl <T0> Sealed for T0 where
        T0: FromUniform,
    {}
    impl <T0,T1> Sealed for (T0,T1) where
        T0: FromUniform,
        T1: FromUniform,
    {}
    impl <T0,T1,T2> Sealed for (T0,T1,T2) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
    {}
    impl <T0,T1,T2,T3> Sealed for (T0,T1,T2,T3) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4> Sealed for (T0,T1,T2,T3,T4) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5> Sealed for (T0,T1,T2,T3,T4,T5) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6> Sealed for (T0,T1,T2,T3,T4,T5,T6) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
        T26: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
        T26: FromUniform,
        T27: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
        T26: FromUniform,
        T27: FromUniform,
        T28: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
        T26: FromUniform,
        T27: FromUniform,
        T28: FromUniform,
        T29: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
        T26: FromUniform,
        T27: FromUniform,
        T28: FromUniform,
        T29: FromUniform,
        T30: FromUniform,
    {}
    impl <T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31> Sealed for (T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31) where
        T0: FromUniform,
        T1: FromUniform,
        T2: FromUniform,
        T3: FromUniform,
        T4: FromUniform,
        T5: FromUniform,
        T6: FromUniform,
        T7: FromUniform,
        T8: FromUniform,
        T9: FromUniform,
        T10: FromUniform,
        T11: FromUniform,
        T12: FromUniform,
        T13: FromUniform,
        T14: FromUniform,
        T15: FromUniform,
        T16: FromUniform,
        T17: FromUniform,
        T18: FromUniform,
        T19: FromUniform,
        T20: FromUniform,
        T21: FromUniform,
        T22: FromUniform,
        T23: FromUniform,
        T24: FromUniform,
        T25: FromUniform,
        T26: FromUniform,
        T27: FromUniform,
        T28: FromUniform,
        T29: FromUniform,
        T30: FromUniform,
        T31: FromUniform,
    {}
}

/// A `Qrng` is a Quasirandom Number Generator. It generates values that are 
/// relatively evenly distributed over the space, as opposed to true random or 
/// pseudorandom values that will form clumps and gaps.
#[derive(Debug, Clone)]
pub struct Qrng(f64);

impl Qrng {

    pub fn new(seed: u32) -> Self {
        Qrng(seed as f64)
    }

    /// Generate a quasirandom point
    pub fn next<Q: Quasirandom>(&mut self) -> Q {
        let result = Q::from_f64(self.0);
        self.0 += 1.0;
        result
    }

}

#[cfg(test)]
mod tests {
    use super::*;
    use rand::{Rng, ChaChaRng, SeedableRng};
    use std::collections::HashSet;

    // Test that the QRNG covers a variety of ranges more effectively than a CPRNG
    #[test]
    fn coverage() {
        for &n in &[100, 1_000, 100_000] {
            let mut qrng = Qrng::new(0);
            let mut qrng_set = HashSet::new();
            let mut rng = ChaChaRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]);
            let mut rng_set = HashSet::new();
            for _ in 0..n {
                qrng_set.insert((qrng.next::<f64>() * n as f64) as u32);
                rng_set.insert((rng.gen::<f64>() * n as f64) as u32);
            }
            assert!(qrng_set.len() > rng_set.len())
        }
    }

    // Test that the QRNG has at least a 3x lower standard deviation of minimum distance between 3D points than a CPRNG
    #[test]
    fn distance() {
        let mut qrng = Qrng::new(0);
        let mut qrng_points = vec![];
        let mut rng = ChaChaRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]);
        let mut rng_points = vec![];
        let n = 1000;
        for _ in 0..n {
            qrng_points.push(qrng.next());
            rng_points.push((rng.gen::<f64>(), rng.gen::<f64>(), rng.gen::<f64>()));
        }

        let d = |p1: (f64, f64, f64), p2: (f64, f64, f64)| {
            ((p1.0 - p2.0).powi(2) + (p1.1 - p2.1).powi(2) + (p1.2 - p2.2).powi(2)).sqrt()
        };

        let mut qrng_distances = vec![];
        let mut rng_distances = vec![];

        for i in 0..qrng_points.len() {
            let mut qrng_closest = ::std::f64::INFINITY;
            let mut rng_closest = ::std::f64::INFINITY;
            for j in 0..qrng_points.len() {
                if i != j {
                    qrng_closest = qrng_closest.min(d(qrng_points[i], qrng_points[j]));
                    rng_closest = rng_closest.min(d(rng_points[i], rng_points[j]));
                }
            }
            qrng_distances.push(qrng_closest);
            rng_distances.push(rng_closest);
        }

        let qrng_distance_sum = qrng_distances.iter().sum::<f64>();
        let rng_distance_sum = rng_distances.iter().sum::<f64>();
        let qrng_distance_mean = qrng_distance_sum / n as f64;
        let rng_distance_mean = rng_distance_sum / n as f64;

        let standard_deviation = |mean: f64, xs: Vec<f64>| {
            let sum_squared_error = xs
                .into_iter()
                .map(|x| (x-mean).powi(2))
                .sum::<f64>();
            (sum_squared_error / n as f64).sqrt()
        };

        let qrng_standard_deviation = standard_deviation(qrng_distance_mean, qrng_distances);
        let rng_standard_deviation = standard_deviation(rng_distance_mean, rng_distances);
        assert!(qrng_standard_deviation < rng_standard_deviation / 3.0);
    }
}
